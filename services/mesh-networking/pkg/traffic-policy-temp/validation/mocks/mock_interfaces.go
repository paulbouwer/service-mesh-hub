// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock_traffic_policy_validation is a generated GoMock package.
package mock_traffic_policy_validation

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/solo-io/service-mesh-hub/pkg/api/core.zephyr.solo.io/v1alpha1/types"
	v1alpha1 "github.com/solo-io/service-mesh-hub/pkg/api/discovery.zephyr.solo.io/v1alpha1"
	v1alpha10 "github.com/solo-io/service-mesh-hub/pkg/api/networking.zephyr.solo.io/v1alpha1"
)

// MockValidator is a mock of Validator interface.
type MockValidator struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorMockRecorder
}

// MockValidatorMockRecorder is the mock recorder for MockValidator.
type MockValidatorMockRecorder struct {
	mock *MockValidator
}

// NewMockValidator creates a new mock instance.
func NewMockValidator(ctrl *gomock.Controller) *MockValidator {
	mock := &MockValidator{ctrl: ctrl}
	mock.recorder = &MockValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidator) EXPECT() *MockValidatorMockRecorder {
	return m.recorder
}

// ValidateTrafficPolicy mocks base method.
func (m *MockValidator) ValidateTrafficPolicy(trafficPolicy *v1alpha10.TrafficPolicy, allMeshServices []*v1alpha1.MeshService) (*types.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateTrafficPolicy", trafficPolicy, allMeshServices)
	ret0, _ := ret[0].(*types.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateTrafficPolicy indicates an expected call of ValidateTrafficPolicy.
func (mr *MockValidatorMockRecorder) ValidateTrafficPolicy(trafficPolicy, allMeshServices interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateTrafficPolicy", reflect.TypeOf((*MockValidator)(nil).ValidateTrafficPolicy), trafficPolicy, allMeshServices)
}

// MockValidationLoop is a mock of ValidationLoop interface.
type MockValidationLoop struct {
	ctrl     *gomock.Controller
	recorder *MockValidationLoopMockRecorder
}

// MockValidationLoopMockRecorder is the mock recorder for MockValidationLoop.
type MockValidationLoopMockRecorder struct {
	mock *MockValidationLoop
}

// NewMockValidationLoop creates a new mock instance.
func NewMockValidationLoop(ctrl *gomock.Controller) *MockValidationLoop {
	mock := &MockValidationLoop{ctrl: ctrl}
	mock.recorder = &MockValidationLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidationLoop) EXPECT() *MockValidationLoopMockRecorder {
	return m.recorder
}

// RunOnce mocks base method.
func (m *MockValidationLoop) RunOnce(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunOnce", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunOnce indicates an expected call of RunOnce.
func (mr *MockValidationLoopMockRecorder) RunOnce(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunOnce", reflect.TypeOf((*MockValidationLoop)(nil).RunOnce), ctx)
}
