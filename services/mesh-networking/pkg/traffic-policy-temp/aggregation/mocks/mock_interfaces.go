// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock_traffic_policy_aggregation is a generated GoMock package.
package mock_traffic_policy_aggregation

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/service-mesh-hub/pkg/api/discovery.zephyr.solo.io/v1alpha1"
	v1alpha10 "github.com/solo-io/service-mesh-hub/pkg/api/networking.zephyr.solo.io/v1alpha1"
	types "github.com/solo-io/service-mesh-hub/pkg/api/networking.zephyr.solo.io/v1alpha1/types"
	traffic_policy_aggregation "github.com/solo-io/service-mesh-hub/services/mesh-networking/pkg/traffic-policy-temp/aggregation"
)

// MockAggregator is a mock of Aggregator interface.
type MockAggregator struct {
	ctrl     *gomock.Controller
	recorder *MockAggregatorMockRecorder
}

// MockAggregatorMockRecorder is the mock recorder for MockAggregator.
type MockAggregatorMockRecorder struct {
	mock *MockAggregator
}

// NewMockAggregator creates a new mock instance.
func NewMockAggregator(ctrl *gomock.Controller) *MockAggregator {
	mock := &MockAggregator{ctrl: ctrl}
	mock.recorder = &MockAggregatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAggregator) EXPECT() *MockAggregatorMockRecorder {
	return m.recorder
}

// FindMergeConflict mocks base method.
func (m *MockAggregator) FindMergeConflict(trafficPolicyToMerge *types.TrafficPolicySpec, policiesToMergeWith []*types.TrafficPolicySpec, meshService *v1alpha1.MeshService) *types.TrafficPolicyStatus_ConflictError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMergeConflict", trafficPolicyToMerge, policiesToMergeWith, meshService)
	ret0, _ := ret[0].(*types.TrafficPolicyStatus_ConflictError)
	return ret0
}

// FindMergeConflict indicates an expected call of FindMergeConflict.
func (mr *MockAggregatorMockRecorder) FindMergeConflict(trafficPolicyToMerge, policiesToMergeWith, meshService interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMergeConflict", reflect.TypeOf((*MockAggregator)(nil).FindMergeConflict), trafficPolicyToMerge, policiesToMergeWith, meshService)
}

// GroupByMeshService mocks base method.
func (m *MockAggregator) GroupByMeshService(trafficPolicies []*v1alpha10.TrafficPolicy, meshServices []*v1alpha1.MeshService) ([]*traffic_policy_aggregation.ServiceWithRelevantPolicies, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupByMeshService", trafficPolicies, meshServices)
	ret0, _ := ret[0].([]*traffic_policy_aggregation.ServiceWithRelevantPolicies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupByMeshService indicates an expected call of GroupByMeshService.
func (mr *MockAggregatorMockRecorder) GroupByMeshService(trafficPolicies, meshServices interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupByMeshService", reflect.TypeOf((*MockAggregator)(nil).GroupByMeshService), trafficPolicies, meshServices)
}
